// Generated by CoffeeScript 1.10.0
(function() {
  var copyClass, getProto, ref,
    hasProp = {}.hasOwnProperty;

  getProto = (ref = Object.getPrototypeOf) != null ? ref : function(obj) {
    return obj.__proto__;
  };

  copyClass = {

    /**
    copy class
    
    @method copy
    @param {Function} originalClass
    @param {String} [name] name of the new class (IE does not support)
    @param {Function} [parentClass]
     */
    copy: function(originalClass, name, parentClass) {
      var F, args, i, k, key, newClass, ref1, ref2, v, value;
      if (name == null) {
        name = (ref1 = originalClass.name) != null ? ref1 : 'IEdoesNotSupportFunctionName';
      }
      args = ((function() {
        var j, ref2, results;
        results = [];
        for (i = j = 1, ref2 = originalClass.length; 1 <= ref2 ? j <= ref2 : j >= ref2; i = 1 <= ref2 ? ++j : --j) {
          results.push('a' + i);
        }
        return results;
      })()).join(', ');
      newClass = (new Function("return function (call) {\n    return function " + name + "(" + args + ") {\n        return call.apply(this, arguments)\n    };\n};")())(originalClass);
      for (key in originalClass) {
        if (!hasProp.call(originalClass, key)) continue;
        value = originalClass[key];
        newClass[key] = value;
      }
      F = function() {};
      if (parentClass) {
        F.prototype = parentClass.prototype;
      } else {
        F.prototype = getProto(originalClass.prototype);
      }
      newClass.prototype = new F();
      ref2 = originalClass.prototype;
      for (k in ref2) {
        if (!hasProp.call(ref2, k)) continue;
        v = ref2[k];
        newClass.prototype[k] = v;
      }
      newClass.prototype.constructor = newClass;
      return newClass;
    }
  };

  module.exports = copyClass;

}).call(this);
